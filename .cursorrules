# üéØ CURSOR RULES - PRIME PRO FINDER (VETRINA PROFESSIONISTI)
**Versione: 1.0 - Data: 01/10/2025**

## ‚ö†Ô∏è ISTRUZIONI CRITICHE
Stai lavorando su Prime Pro Finder, vetrina pubblica per professionisti fitness integrata con Performance Prime.
**LEGGI TUTTO PRIMA DI AGIRE. NON MODIFICARE NULLA SENZA VERIFICARE.**

## üöÄ CONTESTO PROGETTO
- Vetrina pubblica per professionisti fitness (PT, nutrizionisti, fisioterapisti, mental coach)
- Marketplace integrato con Performance Prime (stesso database Supabase)
- Due modalit√†: pubblica (senza auth) e app (con auth e booking)
- SEO-first per acquisizione organica
- Stack: Next.js 14, TypeScript, Supabase, Tailwind, shadcn/ui

## üîê DATABASE SCHEMA (SUPABASE PP)
professionals (id, slug, full_name, headline, bio, category, is_partner, photo_url, city, starting_price, rating_avg, rating_count, services[], available_online, active)

## üîí SISTEMI LOCKED - NON TOCCARE
1. Connessione Supabase base
2. Routing structure
3. Componenti Lovable importati
4. Colori brand: nero #000000, gold #EEBA2B
5. ScrollTopButton.tsx (MutationObserver implementazione)
6. ProtectedRoute.tsx (logica protezione route)
7. PhotoUploader.tsx / PhotoCropper.tsx (sistema upload/crop)
8. Sistema Supabase Auth (useAuth.ts + supabase-portal.ts)
9. Sistema preferiti (heart button + logica business)
10. Filtri colorati (getFilterButtonStyle pattern)

## üìä STATO ATTUALE
- Data: 01/10/2025
- Database: ‚úÖ Connesso a PP con tabelle portal_* isolate
- Auth: ‚úÖ Sistema Supabase completo (login/registrazione/profilo)
- Professionisti: ‚úÖ Dati reali da vetrina_professionals
- Preferiti: ‚úÖ Sistema funzionante con heart button
- Photo Upload: ‚úÖ Sistema completo con crop circolare

## üéØ TODO PRIORITARI
1. ‚úÖ Sistema autenticazione Supabase completo
2. ‚úÖ Sistema preferiti funzionante
3. ‚úÖ Upload foto profilo con crop
4. ‚úÖ Pagine login/registrazione/profilo/preferiti
5. ‚úÖ Database schema corretto (vetrina_professionals)
6. [ ] Sistema prenotazioni
7. [ ] Form contatto professionisti
8. [ ] Sistema recensioni

---

## Overview del Progetto
Vetrina pubblica per professionisti del fitness (personal trainer, nutrizionisti, fisioterapisti, mental coach) integrata con Performance Prime. Il progetto utilizza Next.js 14 con App Router e TypeScript strict mode.

## Stack Tecnologico
- **Framework**: Next.js 14 App Router
- **Linguaggio**: TypeScript (strict mode)
- **Database**: Supabase
- **Styling**: Tailwind CSS
- **UI Components**: shadcn/ui
- **Validazione**: Zod
- **Lingua**: Italiano

## Struttura delle Routes

### (public)/ - Vetrina Pubblica
- Route accessibili senza autenticazione
- Landing page, ricerca professionisti, profili pubblici
- SEO ottimizzato per ogni pagina
- Server Components di default

### (app)/ - Area Utenti Loggati
- Features extra per utenti autenticati
- Sconto 10% visualizzato sui partner per abbonati PP
- Preferiti, cronologia, prenotazioni

### (auth)/ - Autenticazione
- Login, signup, reset password
- Redirect automatici post-autenticazione

## Database Supabase

### Tabella professionals
- Campo `is_partner` (boolean): identifica i partner Performance Prime
- Partner hanno card con styling premium (nero + bordo gold)
- Abbonati PP hanno sconto 10% sui servizi dei partner

### Client/Server Split
- **Server-side**: `@/integrations/supabase/client` per Server Components e Route Handlers
- **Client-side**: creare istanza client separata per Client Components con `createBrowserClient`
- Mai usare il server client in Client Components
- Mai esporre service_role_key nel client

## Convenzioni TypeScript

### Strict Mode
```typescript
// ‚úÖ Corretto
interface Professional {
  id: string;
  name: string;
  is_partner: boolean;
}

const getProfessional = (id: string): Promise<Professional> => {}

// ‚ùå Evitare
const getData = (id: any): any => {}
```

### No Any
- Usare `unknown` se il tipo √® davvero sconosciuto
- Definire interfacce esplicite per tutti i dati
- Tipizzare sempre response API e query Supabase

### Type Safety
- Importare tipi da `@/integrations/supabase/types`
- Creare tipi custom in `@/types/` quando necessario
- Usare generics per componenti riutilizzabili

## React & Next.js Best Practices

### Server vs Client Components
```typescript
// ‚úÖ Server Component (default)
// app/(public)/professionals/page.tsx
import { createClient } from '@/integrations/supabase/client'

export default async function ProfessionalsPage() {
  const supabase = createClient()
  const { data } = await supabase.from('professionals').select()
  return <div>{/* render */}</div>
}

// ‚úÖ Client Component (solo quando necessario)
// components/FilterPanel.tsx
'use client'
import { useState } from 'react'

export function FilterPanel() {
  const [filters, setFilters] = useState({})
  return <div>{/* interactive UI */}</div>
}
```

### Quando Usare Client Components
- Event handlers (onClick, onChange, etc.)
- Hooks React (useState, useEffect, useReducer)
- Browser APIs (localStorage, geolocation)
- Interattivit√† e stato locale
- Contesti React

### Quando Usare Server Components
- Fetch dati dal database
- Operazioni server-side
- Accesso diretto a risorse backend
- SEO e metadata
- Componenti statici

## Styling & Design System

### Brand Colors
```typescript
// tailwind.config.ts
colors: {
  brand: {
    black: '#000000',
    gold: '#EEBA2B',
  }
}
```

### Card Professionisti
```typescript
// Partner: sfondo nero, bordo gold
className="bg-black border-2 border-[#EEBA2B]"

// Non-partner: styling standard
className="bg-white border border-gray-200"
```

### Tailwind CSS
- Usare sempre Tailwind utilities
- NO CSS Modules o styled-components
- Seguire approccio mobile-first
- Usare classi responsive: `sm:`, `md:`, `lg:`, `xl:`
- Preferire composizione con `cn()` da `@/lib/utils`

### shadcn/ui Components
- Importare da `@/components/ui/`
- Personalizzare con Tailwind classes
- Mantenere accessibilit√† (aria-labels, keyboard navigation)

## Form Validation

### Zod Schema
```typescript
import { z } from 'zod'

const professionalSearchSchema = z.object({
  category: z.enum(['personal_trainer', 'nutritionist', 'physiotherapist', 'mental_coach']),
  city: z.string().min(2, 'Inserisci una citt√† valida'),
  maxPrice: z.number().positive().optional(),
})

type SearchFilters = z.infer<typeof professionalSearchSchema>
```

### Form Handling
- Validare input lato client e server
- Mostrare errori user-friendly in italiano
- Usare react-hook-form o form actions Next.js

## Loading States & Error Handling

### Suspense Boundaries
```typescript
import { Suspense } from 'react'
import { ProfessionalSkeleton } from '@/components/LoadingSkeleton'

export default function Page() {
  return (
    <Suspense fallback={<ProfessionalSkeleton />}>
      <ProfessionalsList />
    </Suspense>
  )
}
```

### Error Boundaries
```typescript
// app/(public)/error.tsx
'use client'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div>
      <h2>Qualcosa √® andato storto!</h2>
      <button onClick={reset}>Riprova</button>
    </div>
  )
}
```

### Loading States
- Usare `loading.tsx` per route-level loading
- Skeleton screens per miglior UX
- Ottimistic updates dove appropriato

## SEO & Metadata

### Dynamic Metadata
```typescript
import type { Metadata } from 'next'

export async function generateMetadata({ 
  params 
}: { 
  params: { id: string } 
}): Promise<Metadata> {
  const professional = await getProfessional(params.id)
  
  return {
    title: `${professional.name} - Performance Prime`,
    description: professional.bio,
    openGraph: {
      images: [professional.image_url],
    },
  }
}
```

### SEO Best Practices
- Metadata dinamici per ogni pagina
- Alt text per tutte le immagini
- Semantic HTML (header, main, nav, article)
- Structured data (JSON-LD) per professionisti
- Sitemap.xml e robots.txt

## Responsive Design

### Mobile-First Approach
```typescript
// ‚úÖ Mobile first
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
  {/* cards */}
</div>

// ‚ùå Desktop first
<div className="grid grid-cols-3 md:grid-cols-1">
```

### Breakpoints
- sm: 640px (mobile landscape)
- md: 768px (tablet)
- lg: 1024px (desktop)
- xl: 1280px (large desktop)

## Logica Business

### Sconto Partner per Abbonati PP
```typescript
// Mostrare sconto solo se:
// 1. Professional √® partner (is_partner === true)
// 2. User √® abbonato Performance Prime

const showDiscount = professional.is_partner && user?.subscription_active
const discountedPrice = originalPrice * 0.9 // -10%
```

### Badge Partner
```typescript
{professional.is_partner && (
  <Badge className="bg-[#EEBA2B] text-black">
    Partner Performance Prime
  </Badge>
)}
```

## Performance Optimization

### Image Optimization
```typescript
import Image from 'next/image'

<Image
  src={professional.image_url}
  alt={professional.name}
  width={400}
  height={300}
  className="object-cover"
  priority={false} // true solo above-the-fold
/>
```

### Data Fetching
- Usare `cache: 'force-cache'` per dati statici
- Revalidate con ISR quando appropriato
- Parallel data fetching con Promise.all
- Prefetch con `<Link>` automatico

## Sicurezza

### Supabase RLS
- Row Level Security abilitato su tutte le tabelle
- Policy pubbliche per lettura professionisti
- Policy restrittive per scrittura/modifica

### Environment Variables
```
NEXT_PUBLIC_SUPABASE_URL=...
NEXT_PUBLIC_SUPABASE_ANON_KEY=...
SUPABASE_SERVICE_ROLE_KEY=... # Solo server-side
```

### Input Sanitization
- Validare tutti gli input utente
- Escape HTML user-generated content
- Usare parameterized queries (Supabase lo fa automaticamente)

## Testing Checklist

Prima di considerare una feature completa:
- [ ] TypeScript compila senza errori
- [ ] No any types
- [ ] Responsive su mobile/tablet/desktop
- [ ] Loading states implementati
- [ ] Error handling presente
- [ ] Accessibilit√† verificata
- [ ] SEO metadata presente
- [ ] Form validation con Zod
- [ ] Supabase client/server corretto
- [ ] Testi in italiano
- [ ] Brand colors applicati correttamente

## Convenzioni di Naming

### File & Folders
- Componenti: PascalCase (ProfessionalCard.tsx)
- Utils: kebab-case (format-date.ts)
- Pages: PascalCase (ProfessionalProfile.tsx)
- Route folders: kebab-case o (grouped)

### Variabili & Funzioni
- camelCase per variabili e funzioni
- PascalCase per componenti e tipi
- UPPER_CASE per costanti

### Database
- snake_case per colonne (is_partner, created_at)
- camelCase in TypeScript dopo mapping

## Messaging & Copy

### Tono di Voce
- Professionale ma accessibile
- Italiano corretto e fluente
- Call-to-action chiare

### Esempi
```typescript
// ‚úÖ Buono
"Trova il professionista perfetto per i tuoi obiettivi"
"Scopri i nostri partner certificati"
"Prenota la tua prima consulenza"

// ‚ùå Evitare
"Clicca qui"
"Vai"
"Submit"
```

## Git & Versioning

### Commit Messages
- Italiano
- Prefisso: feat/fix/refactor/docs
- Descrittivi: "feat: aggiungi filtro per categoria"

### Branch Strategy
- main: production
- develop: staging
- feature/*: nuove feature
- fix/*: bugfix

## Note Finali

Questo progetto deve essere production-ready. Ogni feature deve essere:
- Performante
- Accessibile
- SEO-friendly
- Type-safe
- Mobile-responsive
- Ben testata

Quando in dubbio, preferire semplicit√† e robustezza rispetto a over-engineering.

# PROMPT CURSOR - SISTEMA DATABASE PERFORMANCE PRIME

## ‚ö†Ô∏è IMPORTANTE: ARCHITETTURA DATABASE CONDIVISA

**Performance Prime** usa UN SOLO progetto Supabase che gestisce:
1. **App Mobile Performance Prime** (tabelle esistenti dell'app)
2. **Prime Pro Finder** (portale web/vetrina pubblica)

## üõ°Ô∏è STRATEGIA ANTI-CONFLITTO IMPLEMENTATA

Per evitare QUALSIASI conflitto tra app e portale web, abbiamo implementato:

### ISOLAMENTO COMPLETO CON PREFISSO `portal_`

**TUTTE le tabelle del portale web usano prefisso `portal_`:**
- ‚ùå NON usare: `profiles`, `bookings`, `reviews`, `favorites`
- ‚úÖ USARE: `portal_users`, `portal_bookings`, `portal_reviews`, `portal_favorites`

## üìä STRUTTURA DATABASE PORTAL

```sql
-- Tabelle ESCLUSIVE del portale web (Prime Pro Finder):
portal_users              -- Utenti registrati dal portale
portal_favorites          -- Professionisti salvati
portal_bookings           -- Prenotazioni dal portale
portal_reviews            -- Recensioni dal portale
portal_notifications      -- Notifiche utenti portale
portal_search_history     -- Analytics ricerche
portal_contact_requests   -- Richieste di contatto

-- Tabelle CONDIVISE (read-only dal portale):
professionals            -- Lista professionisti (condivisa con app)
auth.users              -- Sistema autenticazione Supabase
```

## üîß IMPLEMENTAZIONE FRONTEND

### File: `/lib/supabase-portal.ts` (DA CREARE)

```typescript
// IMPORTANTE: Tutte le query devono usare tabelle portal_*

import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

// ‚úÖ CORRETTO - Usa portal_users
export async function getPortalUserProfile(userId: string) {
  const { data, error } = await supabase
    .from('portal_users')  // NON 'profiles'!
    .select('*')
    .eq('id', userId)
    .single()
  
  return { data, error }
}

// ‚úÖ CORRETTO - Usa portal_bookings
export async function createPortalBooking(booking: any) {
  const { data, error } = await supabase
    .from('portal_bookings')  // NON 'bookings'!
    .insert(booking)
    .select()
    .single()
  
  return { data, error }
}

// ‚úÖ CORRETTO - Usa portal_reviews
export async function getPortalReviews(professionalId: string) {
  const { data, error } = await supabase
    .from('portal_reviews')  // NON 'reviews'!
    .select('*')
    .eq('professional_id', professionalId)
    .order('created_at', { ascending: false })
  
  return { data, error }
}

// ‚úÖ CORRETTO - Usa portal_favorites
export async function addToPortalFavorites(userId: string, professionalId: string) {
  const { data, error } = await supabase
    .from('portal_favorites')  // NON 'user_favorites'!
    .insert({
      user_id: userId,
      professional_id: professionalId
    })
  
  return { data, error }
}
```

### REGISTRAZIONE UTENTI - IMPORTANTE!

Quando un utente si registra dal PORTALE, deve essere marcato come utente portal:

```typescript
// ‚úÖ CORRETTO - Registrazione dal portale
export async function signUpPortalUser(email: string, password: string, fullName: string) {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      data: {
        full_name: fullName,
        source: 'portal'  // CRITICO: Marca come utente portal!
      }
    }
  })
  
  // Il trigger handle_new_portal_user() creer√† automaticamente
  // il record in portal_users grazie al flag source='portal'
  
  return { data, error }
}

// ‚ùå SBAGLIATO - Non differenzia la sorgente
export async function signUpUser(email: string, password: string) {
  // MANCA il flag source='portal'!
}
```

## üéØ REGOLE D'ORO PER EVITARE CONFLITTI

### 1. NAMING CONVENTION RIGOROSA
```typescript
// ‚ùå MAI fare query dirette su tabelle app
await supabase.from('profiles')...      // NO!
await supabase.from('bookings')...      // NO!
await supabase.from('reviews')...       // NO!

// ‚úÖ SEMPRE usare tabelle portal_*
await supabase.from('portal_users')...      // SI!
await supabase.from('portal_bookings')...   // SI!
await supabase.from('portal_reviews')...    // SI!
```

### 2. SEPARAZIONE DEI COMPONENTI
```typescript
// Organizza i file in modo chiaro:
/lib
  /supabase-app.ts        // Query per l'app mobile
  /supabase-portal.ts     // Query per il portale web (usa portal_*)
  
/hooks
  /useAppAuth.ts          // Auth per app mobile
  /usePortalAuth.ts       // Auth per portale web
  
/components
  /app/                   // Componenti app mobile
  /portal/                // Componenti portale web
```

### 3. TYPES SEPARATI
```typescript
// types/portal.ts
export interface PortalUser {
  id: string
  full_name: string
  email: string
  has_pp_app: boolean  // Se hanno anche l'app
  pp_subscription_status: 'free' | 'premium' | 'pro'
  created_at: string
}

export interface PortalBooking {
  id: string
  user_id: string  // -> portal_users.id
  professional_id: string  // -> professionals.id
  booking_date: string
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed'
  booking_source: 'portal' | 'app' | 'direct'
}

export interface PortalReview {
  id: string
  user_id: string  // -> portal_users.id
  professional_id: string
  rating: number
  content: string
  review_source: 'portal' | 'app'
}
```

## üîç QUERY PATTERNS SICURI

### Recupera professionisti (tabella condivisa - OK)
```typescript
// ‚úÖ OK - professionals √® condivisa
const { data } = await supabase
  .from('professionals')
  .select('*')
  .eq('city', 'Milano')
```

### Recupera dati utente portal
```typescript
// ‚úÖ CORRETTO
const { data } = await supabase
  .from('portal_users')
  .select(`
    *,
    portal_bookings (
      *,
      professional:professionals(*)
    ),
    portal_favorites (
      professional:professionals(*)
    )
  `)
  .eq('id', userId)
```

### Join tra tabelle portal e condivise
```typescript
// ‚úÖ CORRETTO - Join portal_reviews con professionals
const { data } = await supabase
  .from('portal_reviews')
  .select(`
    *,
    user:portal_users(full_name, avatar_url),
    professional:professionals(name, category, city)
  `)
  .eq('professional_id', professionalId)
```

## ‚ö†Ô∏è ERRORI COMUNI DA EVITARE

### ‚ùå ERRORE 1: Usare tabelle sbagliate
```typescript
// SBAGLIATO
const profile = await supabase.from('profiles')...
// GIUSTO
const profile = await supabase.from('portal_users')...
```

### ‚ùå ERRORE 2: Non marcare la sorgente
```typescript
// SBAGLIATO - Registrazione senza source
await supabase.auth.signUp({ email, password })

// GIUSTO - Con source='portal'
await supabase.auth.signUp({
  email, 
  password,
  options: { data: { source: 'portal' } }
})
```

### ‚ùå ERRORE 3: Mischiare dati app e portal
```typescript
// SBAGLIATO - Query miste
const { data } = await supabase
  .from('bookings')  // tabella app
  .select('*, portal_users(*)')  // mix di app e portal

// GIUSTO - Mantieni separazione
const { data } = await supabase
  .from('portal_bookings')  // tabella portal
  .select('*, user:portal_users(*)')  // solo portal
```

## üìà ANALYTICS E REPORTING

Per dashboard e analytics, usa viste dedicate:

```typescript
// Analytics solo portal
const { data } = await supabase
  .from('portal_analytics')  // Vista aggregata
  .select('*')
  .single()

// Metriche professionista (solo da portal)
const { data } = await supabase
  .rpc('get_portal_professional_stats', { prof_id: professionalId })
```

## üöÄ DEPLOYMENT CHECKLIST

Prima di andare in produzione, verifica:

- [ ] Tutte le query usano `portal_*` tables
- [ ] Registrazione marca utenti con `source='portal'`
- [ ] Nessuna query diretta a tabelle app (`profiles`, `bookings`, etc.)
- [ ] Types TypeScript allineati con schema `portal_*`
- [ ] RLS policies attive su tutte le tabelle `portal_*`
- [ ] Backup del database prima di deploy
- [ ] Test di integrazione app + portal funzionanti

## üîê SICUREZZA

```typescript
// RLS √® gi√† configurato, ma verifica sempre:
// - Gli utenti portal vedono solo i propri dati
// - Le recensioni sono pubbliche ma modificabili solo dal proprietario
// - I professionisti sono read-only dal portal
```

## üìû SUPPORTO

Per domande sull'architettura database:
1. Controlla sempre il prefisso delle tabelle (`portal_*`)
2. Verifica di non mischiare query app e portal
3. Usa i types TypeScript corretti per portal

---

## üìÖ SESSIONE 01/10/2025 - AUTENTICAZIONE E SISTEMA PREFERITI

### FILE MODIFICATI:
- ‚ú® ScrollTopButton.tsx (nuovo)
- ‚úèÔ∏è App.tsx (route protette)
- ‚úèÔ∏è Header.tsx (auth dinamico)
- ‚ú® Login.tsx, Registrati.tsx, Profilo.tsx, Preferiti.tsx (nuovi)
- ‚ú® ProtectedRoute.tsx (nuovo)
- ‚ú® PhotoUploader.tsx, PhotoCropper.tsx (nuovi)
- ‚úèÔ∏è ProfessionalCard.tsx (heart button)
- ‚úèÔ∏è useAuth.ts (Supabase integration)
- ‚ú® supabase-portal.ts (nuovo)
- ‚ú® portal.ts types (nuovo)
- ‚úèÔ∏è Supabase client + types

### NUOVI LOCKED:
- ScrollTopButton (MutationObserver pattern)
- ProtectedRoute (logica protezione)
- PhotoUploader/PhotoCropper (upload/crop system)
- Sistema Supabase Auth completo
- Sistema preferiti funzionante
- Filtri colorati dinamic

### REGOLE AGGIUNTE:
- Pattern MutationObserver per UI state
- Pattern Auth State Management (PortalUser ‚Üí User)
- Pattern Colori Filtri Dinamici
- Pattern Database Isolation (portal_* tables)
- Regola: "Non modificare layout senza autorizzazione"

### BUG FIXATI:
- Scroll-to-top visibile con mobile menu
- Login non funzionante (RLS + auto-creazione profilo)
- Foreign key violation preferiti (vetrina_professionals)
- Errori TypeScript error properties
- Foto profilo non persistente
- Layout modificato senza autorizzazione

### TODO NEXT:
- Sistema prenotazioni
- Form contatto professionisti
- Sistema recensioni
- Loading states completi
- Error boundaries

---

**RICORDA**: Il sistema portal √® COMPLETAMENTE ISOLATO dall'app. Non ci sono conflitti se rispetti il prefisso `portal_*` per tutte le operazioni del portale web!
